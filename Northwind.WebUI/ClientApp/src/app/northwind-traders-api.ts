/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.13.0 (NJsonSchema v9.13.17.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IRoomsClient {
    getAll(): Observable<RoomListModel | null>;
    get(id: number): Observable<RoomDetailsModel | null>;
    getCalendar(id: number): Observable<RoomDetailsModel | null>;
    create(command: CreateRoomCommand): Observable<RoomPreviewModel | null>;
    update(id: number, command: UpdateRoomCommand): Observable<RoomPreviewModel | null>;
    delete(id: number): Observable<void>;
}

@Injectable()
export class RoomsClient implements IRoomsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAll(): Observable<RoomListModel | null> {
        let url_ = this.baseUrl + "/api/Rooms/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<RoomListModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<RoomListModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<RoomListModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RoomListModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RoomListModel | null>(<any>null);
    }

    get(id: number): Observable<RoomDetailsModel | null> {
        let url_ = this.baseUrl + "/api/Rooms/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<RoomDetailsModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<RoomDetailsModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<RoomDetailsModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RoomDetailsModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RoomDetailsModel | null>(<any>null);
    }

    getCalendar(id: number): Observable<RoomDetailsModel | null> {
        let url_ = this.baseUrl + "/api/Rooms/GetCalendar/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCalendar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCalendar(<any>response_);
                } catch (e) {
                    return <Observable<RoomDetailsModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<RoomDetailsModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetCalendar(response: HttpResponseBase): Observable<RoomDetailsModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RoomDetailsModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RoomDetailsModel | null>(<any>null);
    }

    create(command: CreateRoomCommand): Observable<RoomPreviewModel | null> {
        let url_ = this.baseUrl + "/api/Rooms/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<RoomPreviewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<RoomPreviewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<RoomPreviewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RoomPreviewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RoomPreviewModel | null>(<any>null);
    }

    update(id: number, command: UpdateRoomCommand): Observable<RoomPreviewModel | null> {
        let url_ = this.baseUrl + "/api/Rooms/Update/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<RoomPreviewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<RoomPreviewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<RoomPreviewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RoomPreviewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RoomPreviewModel | null>(<any>null);
    }

    delete(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Rooms/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

export class RoomListModel implements IRoomListModel {
    rooms?: RoomPreviewModel[] | undefined;

    constructor(data?: IRoomListModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["rooms"] && data["rooms"].constructor === Array) {
                this.rooms = [] as any;
                for (let item of data["rooms"])
                    this.rooms!.push(RoomPreviewModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomListModel {
        data = typeof data === 'object' ? data : {};
        let result = new RoomListModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.rooms && this.rooms.constructor === Array) {
            data["rooms"] = [];
            for (let item of this.rooms)
                data["rooms"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IRoomListModel {
    rooms?: RoomPreviewModel[] | undefined;
}

export class RoomPreviewModel implements IRoomPreviewModel {
    roomId?: number;
    roomNumber?: number;
    roomCapacity?: number;
    notes?: string | undefined;

    constructor(data?: IRoomPreviewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.roomId = data["roomId"];
            this.roomNumber = data["roomNumber"];
            this.roomCapacity = data["roomCapacity"];
            this.notes = data["notes"];
        }
    }

    static fromJS(data: any): RoomPreviewModel {
        data = typeof data === 'object' ? data : {};
        let result = new RoomPreviewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomId"] = this.roomId;
        data["roomNumber"] = this.roomNumber;
        data["roomCapacity"] = this.roomCapacity;
        data["notes"] = this.notes;
        return data; 
    }
}

export interface IRoomPreviewModel {
    roomId?: number;
    roomNumber?: number;
    roomCapacity?: number;
    notes?: string | undefined;
}

export class RoomDetailsModel implements IRoomDetailsModel {
    roomId?: number;
    roomNumber?: number;
    roomCapacity?: number;
    notes?: string | undefined;
    reservationDates?: Date[] | undefined;

    constructor(data?: IRoomDetailsModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.roomId = data["roomId"];
            this.roomNumber = data["roomNumber"];
            this.roomCapacity = data["roomCapacity"];
            this.notes = data["notes"];
            if (data["reservationDates"] && data["reservationDates"].constructor === Array) {
                this.reservationDates = [] as any;
                for (let item of data["reservationDates"])
                    this.reservationDates!.push(Date.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomDetailsModel {
        data = typeof data === 'object' ? data : {};
        let result = new RoomDetailsModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomId"] = this.roomId;
        data["roomNumber"] = this.roomNumber;
        data["roomCapacity"] = this.roomCapacity;
        data["notes"] = this.notes;
        if (this.reservationDates && this.reservationDates.constructor === Array) {
            data["reservationDates"] = [];
            for (let item of this.reservationDates)
                data["reservationDates"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IRoomDetailsModel {
    roomId?: number;
    roomNumber?: number;
    roomCapacity?: number;
    notes?: string | undefined;
    reservationDates?: Date[] | undefined;
}

export class Date implements IDate {
    dateId?: number;
    roomId?: number;
    reservationDate?: Date;

    constructor(data?: IDate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.dateId = data["dateId"];
            this.roomId = data["roomId"];
            this.reservationDate = data["reservationDate"] ? new Date(data["reservationDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Date {
        data = typeof data === 'object' ? data : {};
        let result = new Date();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dateId"] = this.dateId;
        data["roomId"] = this.roomId;
        data["reservationDate"] = this.reservationDate ? this.reservationDate.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IDate {
    dateId?: number;
    roomId?: number;
    reservationDate?: Date;
}

export class CreateRoomCommand implements ICreateRoomCommand {
    roomId?: number;
    roomNumber?: number;
    roomCapacity?: number;
    notes?: string | undefined;
    reservationDates?: Date[] | undefined;

    constructor(data?: ICreateRoomCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.roomId = data["roomId"];
            this.roomNumber = data["roomNumber"];
            this.roomCapacity = data["roomCapacity"];
            this.notes = data["notes"];
            if (data["reservationDates"] && data["reservationDates"].constructor === Array) {
                this.reservationDates = [] as any;
                for (let item of data["reservationDates"])
                    this.reservationDates!.push(Date.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateRoomCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateRoomCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomId"] = this.roomId;
        data["roomNumber"] = this.roomNumber;
        data["roomCapacity"] = this.roomCapacity;
        data["notes"] = this.notes;
        if (this.reservationDates && this.reservationDates.constructor === Array) {
            data["reservationDates"] = [];
            for (let item of this.reservationDates)
                data["reservationDates"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICreateRoomCommand {
    roomId?: number;
    roomNumber?: number;
    roomCapacity?: number;
    notes?: string | undefined;
    reservationDates?: Date[] | undefined;
}

export class UpdateRoomCommand implements IUpdateRoomCommand {
    roomId?: number;
    roomNumber?: number;
    roomCapacity?: number;
    notes?: string | undefined;
    reservationDates?: Date[] | undefined;

    constructor(data?: IUpdateRoomCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.roomId = data["roomId"];
            this.roomNumber = data["roomNumber"];
            this.roomCapacity = data["roomCapacity"];
            this.notes = data["notes"];
            if (data["reservationDates"] && data["reservationDates"].constructor === Array) {
                this.reservationDates = [] as any;
                for (let item of data["reservationDates"])
                    this.reservationDates!.push(Date.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpdateRoomCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateRoomCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomId"] = this.roomId;
        data["roomNumber"] = this.roomNumber;
        data["roomCapacity"] = this.roomCapacity;
        data["notes"] = this.notes;
        if (this.reservationDates && this.reservationDates.constructor === Array) {
            data["reservationDates"] = [];
            for (let item of this.reservationDates)
                data["reservationDates"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUpdateRoomCommand {
    roomId?: number;
    roomNumber?: number;
    roomCapacity?: number;
    notes?: string | undefined;
    reservationDates?: Date[] | undefined;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}